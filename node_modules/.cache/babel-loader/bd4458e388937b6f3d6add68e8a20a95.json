{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { getRealRegion } from \"./getRealRegion\";\nimport { isFipsRegion } from \"./isFipsRegion\";\nexport var resolveRegionConfig = function resolveRegionConfig(input) {\n  var _region = input.region,\n      _useFipsEndpoint = input.useFipsEndpoint;\n\n  if (!_region) {\n    throw new Error(\"Region is missing\");\n  }\n\n  return __assign(__assign({}, input), {\n    region: function region() {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var providedRegion;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (typeof _region === \"string\") {\n                return [2, getRealRegion(_region)];\n              }\n\n              return [4, _region()];\n\n            case 1:\n              providedRegion = _a.sent();\n              return [2, getRealRegion(providedRegion)];\n          }\n        });\n      });\n    },\n    useFipsEndpoint: function useFipsEndpoint() {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var providedRegion, _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              if (!(typeof _region === \"string\")) return [3, 1];\n              _a = _region;\n              return [3, 3];\n\n            case 1:\n              return [4, _region()];\n\n            case 2:\n              _a = _b.sent();\n              _b.label = 3;\n\n            case 3:\n              providedRegion = _a;\n\n              if (isFipsRegion(providedRegion)) {\n                return [2, true];\n              }\n\n              return [2, typeof _useFipsEndpoint === \"boolean\" ? Promise.resolve(_useFipsEndpoint) : _useFipsEndpoint()];\n          }\n        });\n      });\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}