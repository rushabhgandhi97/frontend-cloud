{"ast":null,"code":"var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nvar numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/; // const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\nvar consider = {\n  hex: true,\n  leadingZeros: true,\n  decimalPoint: \"\\.\" //skipLike: /regex/\n\n};\n\nfunction toNumber(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // const options = Object.assign({}, consider);\n  // if(opt.leadingZeros === false){\n  //     options.leadingZeros = false;\n  // }else if(opt.hex === false){\n  //     options.hex = false;\n  // }\n  options = Object.assign({}, consider, options);\n  if (!str || typeof str !== \"string\") return str;\n  var trimmedStr = str.trim();\n  if (options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;else if (options.hex && hexRegex.test(trimmedStr)) {\n    return Number.parseInt(trimmedStr, 16); // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n  } else {\n    //separate negative sign, leading zeros, and rest number\n    var match = numRegex.exec(trimmedStr);\n\n    if (match) {\n      var negative = match[1];\n      var leadingZeros = match[2];\n      var num = match[3]; //complete num\n\n      var eNotation = match[4] || match[6];\n      if (leadingZeros.length === 1 && num[0] === \".\") return Number(str);else if (!options.leadingZeros && leadingZeros.length > 0) return str;else return Number(trimmedStr);\n    } else {\n      //non-numeric string\n      return str;\n    }\n  }\n}\n\nmodule.exports = toNumber;","map":null,"metadata":{},"sourceType":"script"}