{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutMetricFilterRequest } from \"../models/models_0\";\nimport { deserializeAws_json1_1PutMetricFilterCommand, serializeAws_json1_1PutMetricFilterCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Creates or updates a metric filter and associates it with the specified log group.\n *       Metric filters allow you to configure rules to extract metric data from log events ingested\n *       through <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\">PutLogEvents</a>.</p>\n *          <p>The maximum number of metric filters that can be associated with a log group is\n *       100.</p>\n */\n\nvar PutMetricFilterCommand =\n/** @class */\nfunction (_super) {\n  __extends(PutMetricFilterCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PutMetricFilterCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PutMetricFilterCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"CloudWatchLogsClient\";\n    var commandName = \"PutMetricFilterCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutMetricFilterRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: function outputFilterSensitiveLog(output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutMetricFilterCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1PutMetricFilterCommand(input, context);\n  };\n\n  PutMetricFilterCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1PutMetricFilterCommand(output, context);\n  };\n\n  return PutMetricFilterCommand;\n}($Command);\n\nexport { PutMetricFilterCommand };","map":null,"metadata":{},"sourceType":"module"}