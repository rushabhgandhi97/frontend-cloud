{"ast":null,"code":"import { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport { memoize } from \"@aws-sdk/property-provider\";\nimport { SignatureV4 } from \"@aws-sdk/signature-v4\";\nvar CREDENTIAL_EXPIRE_WINDOW = 300000;\nexport var resolveAwsAuthConfig = function resolveAwsAuthConfig(input) {\n  var normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);\n  var _a = input.signingEscapePath,\n      signingEscapePath = _a === void 0 ? true : _a,\n      _b = input.systemClockOffset,\n      systemClockOffset = _b === void 0 ? input.systemClockOffset || 0 : _b,\n      sha256 = input.sha256;\n  var signer;\n\n  if (input.signer) {\n    signer = normalizeProvider(input.signer);\n  } else {\n    signer = function signer() {\n      return normalizeProvider(input.region)().then(function (region) {\n        return __awaiter(void 0, void 0, void 0, function () {\n          var _a, _b, _c;\n\n          var _d;\n\n          return __generator(this, function (_e) {\n            switch (_e.label) {\n              case 0:\n                _b = (_a = input).regionInfoProvider;\n                _c = [region];\n                _d = {};\n                return [4, input.useFipsEndpoint()];\n\n              case 1:\n                _d.useFipsEndpoint = _e.sent();\n                return [4, input.useDualstackEndpoint()];\n\n              case 2:\n                return [4, _b.apply(_a, _c.concat([(_d.useDualstackEndpoint = _e.sent(), _d)]))];\n\n              case 3:\n                return [2, [_e.sent() || {}, region]];\n            }\n          });\n        });\n      }).then(function (_a) {\n        var _b = __read(_a, 2),\n            regionInfo = _b[0],\n            region = _b[1];\n\n        var signingRegion = regionInfo.signingRegion,\n            signingService = regionInfo.signingService;\n        input.signingRegion = input.signingRegion || signingRegion || region;\n        input.signingName = input.signingName || signingService || input.serviceId;\n\n        var params = __assign(__assign({}, input), {\n          credentials: normalizedCreds,\n          region: input.signingRegion,\n          service: input.signingName,\n          sha256: sha256,\n          uriEscapePath: signingEscapePath\n        });\n\n        var signerConstructor = input.signerConstructor || SignatureV4;\n        return new signerConstructor(params);\n      });\n    };\n  }\n\n  return __assign(__assign({}, input), {\n    systemClockOffset: systemClockOffset,\n    signingEscapePath: signingEscapePath,\n    credentials: normalizedCreds,\n    signer: signer\n  });\n};\nexport var resolveSigV4AuthConfig = function resolveSigV4AuthConfig(input) {\n  var normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);\n  var _a = input.signingEscapePath,\n      signingEscapePath = _a === void 0 ? true : _a,\n      _b = input.systemClockOffset,\n      systemClockOffset = _b === void 0 ? input.systemClockOffset || 0 : _b,\n      sha256 = input.sha256;\n  var signer;\n\n  if (input.signer) {\n    signer = normalizeProvider(input.signer);\n  } else {\n    signer = normalizeProvider(new SignatureV4({\n      credentials: normalizedCreds,\n      region: input.region,\n      service: input.signingName,\n      sha256: sha256,\n      uriEscapePath: signingEscapePath\n    }));\n  }\n\n  return __assign(__assign({}, input), {\n    systemClockOffset: systemClockOffset,\n    signingEscapePath: signingEscapePath,\n    credentials: normalizedCreds,\n    signer: signer\n  });\n};\n\nvar normalizeProvider = function normalizeProvider(input) {\n  if (typeof input === \"object\") {\n    var promisified_1 = Promise.resolve(input);\n    return function () {\n      return promisified_1;\n    };\n  }\n\n  return input;\n};\n\nvar normalizeCredentialProvider = function normalizeCredentialProvider(credentials) {\n  if (typeof credentials === \"function\") {\n    return memoize(credentials, function (credentials) {\n      return credentials.expiration !== undefined && credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW;\n    }, function (credentials) {\n      return credentials.expiration !== undefined;\n    });\n  }\n\n  return normalizeProvider(credentials);\n};","map":null,"metadata":{},"sourceType":"module"}