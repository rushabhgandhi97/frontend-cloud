{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/rushabhgandhi/Documents/Cloud Computing/Final_Project/frontend-cloud/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar mapObj = require('map-obj');\n\nvar camelCase = require('camelcase');\n\nvar QuickLru = require('quick-lru');\n\nvar has = function has(array, key) {\n  return array.some(function (x) {\n    if (typeof x === 'string') {\n      return x === key;\n    }\n\n    x.lastIndex = 0;\n    return x.test(key);\n  });\n};\n\nvar cache = new QuickLru({\n  maxSize: 100000\n}); // Reproduces behavior from `map-obj`\n\nvar isObject = function isObject(value) {\n  return typeof value === 'object' && value !== null && !(value instanceof RegExp) && !(value instanceof Error) && !(value instanceof Date);\n};\n\nvar camelCaseConvert = function camelCaseConvert(input, options) {\n  if (!isObject(input)) {\n    return input;\n  }\n\n  options = _objectSpread({\n    deep: false,\n    pascalCase: false\n  }, options);\n  var _options = options,\n      exclude = _options.exclude,\n      pascalCase = _options.pascalCase,\n      stopPaths = _options.stopPaths,\n      deep = _options.deep;\n  var stopPathsSet = new Set(stopPaths);\n\n  var makeMapper = function makeMapper(parentPath) {\n    return function (key, value) {\n      if (deep && isObject(value)) {\n        var path = parentPath === undefined ? key : \"\".concat(parentPath, \".\").concat(key);\n\n        if (!stopPathsSet.has(path)) {\n          value = mapObj(value, makeMapper(path));\n        }\n      }\n\n      if (!(exclude && has(exclude, key))) {\n        var cacheKey = pascalCase ? \"\".concat(key, \"_\") : key;\n\n        if (cache.has(cacheKey)) {\n          key = cache.get(cacheKey);\n        } else {\n          var ret = camelCase(key, {\n            pascalCase: pascalCase\n          });\n\n          if (key.length < 100) {\n            // Prevent abuse\n            cache.set(cacheKey, ret);\n          }\n\n          key = ret;\n        }\n      }\n\n      return [key, value];\n    };\n  };\n\n  return mapObj(input, makeMapper(undefined));\n};\n\nmodule.exports = function (input, options) {\n  if (Array.isArray(input)) {\n    return Object.keys(input).map(function (key) {\n      return camelCaseConvert(input[key], options);\n    });\n  }\n\n  return camelCaseConvert(input, options);\n};","map":null,"metadata":{},"sourceType":"script"}