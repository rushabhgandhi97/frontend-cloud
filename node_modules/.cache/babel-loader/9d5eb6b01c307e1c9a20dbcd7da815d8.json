{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/rajatraghuwanshi/Documents/Cloud Project/frontend/frontend-cloud/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _objectSpread = require(\"/Users/rajatraghuwanshi/Documents/Cloud Project/frontend/frontend-cloud/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar isObject = function isObject(value) {\n  return typeof value === 'object' && value !== null;\n};\n\nvar mapObjectSkip = Symbol('skip'); // Customized for this use-case\n\nvar isObjectCustom = function isObjectCustom(value) {\n  return isObject(value) && !(value instanceof RegExp) && !(value instanceof Error) && !(value instanceof Date);\n};\n\nvar mapObject = function mapObject(object, mapper, options) {\n  var isSeen = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new WeakMap();\n  options = _objectSpread({\n    deep: false,\n    target: {}\n  }, options);\n\n  if (isSeen.has(object)) {\n    return isSeen.get(object);\n  }\n\n  isSeen.set(object, options.target);\n  var _options = options,\n      target = _options.target;\n  delete options.target;\n\n  var mapArray = function mapArray(array) {\n    return array.map(function (element) {\n      return isObjectCustom(element) ? mapObject(element, mapper, options, isSeen) : element;\n    });\n  };\n\n  if (Array.isArray(object)) {\n    return mapArray(object);\n  }\n\n  var _arr = Object.entries(object);\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var _arr$_i = _slicedToArray(_arr[_i], 2),\n        key = _arr$_i[0],\n        value = _arr$_i[1];\n\n    var mapResult = mapper(key, value, object);\n\n    if (mapResult === mapObjectSkip) {\n      continue;\n    }\n\n    var _mapResult = _slicedToArray(mapResult, 3),\n        newKey = _mapResult[0],\n        newValue = _mapResult[1],\n        _mapResult$ = _mapResult[2];\n\n    _mapResult$ = _mapResult$ === void 0 ? {} : _mapResult$;\n    var _mapResult$$shouldRec = _mapResult$.shouldRecurse,\n        shouldRecurse = _mapResult$$shouldRec === void 0 ? true : _mapResult$$shouldRec; // Drop `__proto__` keys.\n\n    if (newKey === '__proto__') {\n      continue;\n    }\n\n    if (options.deep && shouldRecurse && isObjectCustom(newValue)) {\n      newValue = Array.isArray(newValue) ? mapArray(newValue) : mapObject(newValue, mapper, options, isSeen);\n    }\n\n    target[newKey] = newValue;\n  }\n\n  return target;\n};\n\nmodule.exports = function (object, mapper, options) {\n  if (!isObject(object)) {\n    throw new TypeError(\"Expected an object, got `\".concat(object, \"` (\").concat(typeof object, \")\"));\n  }\n\n  return mapObject(object, mapper, options);\n};\n\nmodule.exports.mapObjectSkip = mapObjectSkip;","map":null,"metadata":{},"sourceType":"script"}