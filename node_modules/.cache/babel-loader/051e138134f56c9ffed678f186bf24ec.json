{"ast":null,"code":"import { __read } from \"tslib\";\nexport var parseBoolean = function parseBoolean(value) {\n  switch (value) {\n    case \"true\":\n      return true;\n\n    case \"false\":\n      return false;\n\n    default:\n      throw new Error(\"Unable to parse boolean value \\\"\" + value + \"\\\"\");\n  }\n};\nexport var expectBoolean = function expectBoolean(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"boolean\") {\n    return value;\n  }\n\n  throw new TypeError(\"Expected boolean, got \" + typeof value);\n};\nexport var expectNumber = function expectNumber(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"number\") {\n    return value;\n  }\n\n  throw new TypeError(\"Expected number, got \" + typeof value);\n};\nvar MAX_FLOAT = Math.ceil(Math.pow(2, 127) * (2 - Math.pow(2, -23)));\nexport var expectFloat32 = function expectFloat32(value) {\n  var expected = expectNumber(value);\n\n  if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {\n    if (Math.abs(expected) > MAX_FLOAT) {\n      throw new TypeError(\"Expected 32-bit float, got \" + value);\n    }\n  }\n\n  return expected;\n};\nexport var expectLong = function expectLong(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (Number.isInteger(value) && !Number.isNaN(value)) {\n    return value;\n  }\n\n  throw new TypeError(\"Expected integer, got \" + typeof value);\n};\nexport var expectInt = expectLong;\nexport var expectInt32 = function expectInt32(value) {\n  return expectSizedInt(value, 32);\n};\nexport var expectShort = function expectShort(value) {\n  return expectSizedInt(value, 16);\n};\nexport var expectByte = function expectByte(value) {\n  return expectSizedInt(value, 8);\n};\n\nvar expectSizedInt = function expectSizedInt(value, size) {\n  var expected = expectLong(value);\n\n  if (expected !== undefined && castInt(expected, size) !== expected) {\n    throw new TypeError(\"Expected \" + size + \"-bit integer, got \" + value);\n  }\n\n  return expected;\n};\n\nvar castInt = function castInt(value, size) {\n  switch (size) {\n    case 32:\n      return Int32Array.of(value)[0];\n\n    case 16:\n      return Int16Array.of(value)[0];\n\n    case 8:\n      return Int8Array.of(value)[0];\n  }\n};\n\nexport var expectNonNull = function expectNonNull(value, location) {\n  if (value === null || value === undefined) {\n    if (location) {\n      throw new TypeError(\"Expected a non-null value for \" + location);\n    }\n\n    throw new TypeError(\"Expected a non-null value\");\n  }\n\n  return value;\n};\nexport var expectObject = function expectObject(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"object\" && !Array.isArray(value)) {\n    return value;\n  }\n\n  throw new TypeError(\"Expected object, got \" + typeof value);\n};\nexport var expectString = function expectString(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"string\") {\n    return value;\n  }\n\n  throw new TypeError(\"Expected string, got \" + typeof value);\n};\nexport var expectUnion = function expectUnion(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  var asObject = expectObject(value);\n  var setKeys = Object.entries(asObject).filter(function (_a) {\n    var _b = __read(_a, 2),\n        _ = _b[0],\n        v = _b[1];\n\n    return v !== null && v !== undefined;\n  }).map(function (_a) {\n    var _b = __read(_a, 2),\n        k = _b[0],\n        _ = _b[1];\n\n    return k;\n  });\n\n  if (setKeys.length === 0) {\n    throw new TypeError(\"Unions must have exactly one non-null member\");\n  }\n\n  if (setKeys.length > 1) {\n    throw new TypeError(\"Unions must have exactly one non-null member. Keys \" + setKeys + \" were not null.\");\n  }\n\n  return asObject;\n};\nexport var strictParseDouble = function strictParseDouble(value) {\n  if (typeof value == \"string\") {\n    return expectNumber(parseNumber(value));\n  }\n\n  return expectNumber(value);\n};\nexport var strictParseFloat = strictParseDouble;\nexport var strictParseFloat32 = function strictParseFloat32(value) {\n  if (typeof value == \"string\") {\n    return expectFloat32(parseNumber(value));\n  }\n\n  return expectFloat32(value);\n};\nvar NUMBER_REGEX = /(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)|(-?Infinity)|(NaN)/g;\n\nvar parseNumber = function parseNumber(value) {\n  var matches = value.match(NUMBER_REGEX);\n\n  if (matches === null || matches[0].length !== value.length) {\n    throw new TypeError(\"Expected real number, got implicit NaN\");\n  }\n\n  return parseFloat(value);\n};\n\nexport var limitedParseDouble = function limitedParseDouble(value) {\n  if (typeof value == \"string\") {\n    return parseFloatString(value);\n  }\n\n  return expectNumber(value);\n};\nexport var handleFloat = limitedParseDouble;\nexport var limitedParseFloat = limitedParseDouble;\nexport var limitedParseFloat32 = function limitedParseFloat32(value) {\n  if (typeof value == \"string\") {\n    return parseFloatString(value);\n  }\n\n  return expectFloat32(value);\n};\n\nvar parseFloatString = function parseFloatString(value) {\n  switch (value) {\n    case \"NaN\":\n      return NaN;\n\n    case \"Infinity\":\n      return Infinity;\n\n    case \"-Infinity\":\n      return -Infinity;\n\n    default:\n      throw new Error(\"Unable to parse float value: \" + value);\n  }\n};\n\nexport var strictParseLong = function strictParseLong(value) {\n  if (typeof value === \"string\") {\n    return expectLong(parseNumber(value));\n  }\n\n  return expectLong(value);\n};\nexport var strictParseInt = strictParseLong;\nexport var strictParseInt32 = function strictParseInt32(value) {\n  if (typeof value === \"string\") {\n    return expectInt32(parseNumber(value));\n  }\n\n  return expectInt32(value);\n};\nexport var strictParseShort = function strictParseShort(value) {\n  if (typeof value === \"string\") {\n    return expectShort(parseNumber(value));\n  }\n\n  return expectShort(value);\n};\nexport var strictParseByte = function strictParseByte(value) {\n  if (typeof value === \"string\") {\n    return expectByte(parseNumber(value));\n  }\n\n  return expectByte(value);\n};","map":null,"metadata":{},"sourceType":"module"}