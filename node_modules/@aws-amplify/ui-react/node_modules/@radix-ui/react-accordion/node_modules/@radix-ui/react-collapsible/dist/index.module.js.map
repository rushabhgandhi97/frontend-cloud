{"mappings":"wiBAiBA,MAGOA,EAA0BC,GAA0BC,EAHlC,mDAYzB,MAAOC,EAAqBC,GAC1BJ,EAbuB,sBAwBzB,MAAMK,yBAAcC,EAAMC,YACxB,CAACC,EAAsCC,KACrC,MAAMC,mBACJA,EACAC,KAAMC,EAFFC,YAGJA,EAHIC,SAIJA,EAJIC,aAKJA,KACGC,GACDR,GAEGG,GAAO,EAAOM,GAAWC,EAAqB,CACnDC,KAAMP,EACNQ,YAAaP,EACbQ,SAAUN,iBAGZ,OACEO,EAAAC,cAACC,EAAD,CACEC,MAAOf,EACPI,SAAUA,EACVY,UAAWC,IACXhB,KAAMA,EACNiB,aAActB,EAAMuB,aAAY,IAAMZ,GAASa,IAAcA,KAAW,CAACb,kBAEzEK,EAAAC,cAACQ,EAAUC,IAAXC,EAAA,CACE,aAAYC,EAASvB,GACrB,gBAAeG,EAAW,QAAKqB,GAC3BnB,EAHN,CAIEoB,IAAK3B,6BAmBf,MAAM4B,gCAAqB/B,EAAMC,YAC/B,CAACC,EAA6CC,KAC5C,MAAMC,mBAAEA,KAAuB4B,GAAiB9B,EAC1C+B,EAAUnC,EATC,qBASmCM,gBACpD,OACEY,EAAAC,cAACQ,EAAUS,OAAXP,EAAA,CACE,gBAAeM,EAAQb,UACvB,gBAAea,EAAQ5B,OAAQ,EAC/B,aAAYuB,EAASK,EAAQ5B,MAC7B,gBAAe4B,EAAQzB,SAAW,QAAKqB,EACvCrB,SAAUyB,EAAQzB,UACdwB,EANN,CAOEF,IAAK3B,EACLgC,QAASC,EAAqBlC,EAAMiC,QAASF,EAAQX,wCAuB7D,MAAMe,gCAAqBrC,EAAMC,YAC/B,CAACC,EAA6CC,KAC5C,MAAMmC,WAAEA,KAAeC,GAAiBrC,EAClC+B,EAAUnC,EAdC,qBAcmCI,EAAME,iCAC1D,OACEY,EAAAC,cAACuB,EAAD,CAAUC,QAASH,GAAcL,EAAQ5B,OACtC,EAAGoC,QAAAA,kBACFzB,EAAAC,cAACyB,EAADf,EAAA,GAA4BY,EAA5B,CAA0CT,IAAK3B,EAAcsC,QAASA,uBAgBhF,MAAME,eAAyB3C,EAAMC,YAGnC,CAACC,EAAiDC,KAClD,MAAMC,mBAAEA,EAAFqC,QAAsBA,EAAtBG,SAA+BA,KAAaL,GAAiBrC,EAC7D+B,EAAUnC,EAvCG,qBAuCiCM,IAC7CyC,EAAWC,GAAgB9C,EAAM+C,SAASN,GAC3CX,EAAM9B,EAAMgD,OAAsC,MAClDC,EAAeC,EAAgB/C,EAAc2B,GAC7CqB,EAAYnD,EAAMgD,OAA2B,GAC7CI,EAASD,EAAUE,QACnBC,EAAWtD,EAAMgD,OAA2B,GAC5CO,EAAQD,EAASD,QAGjBG,EAASvB,EAAQ5B,MAAQwC,EA6B/B,OA3BAY,GAAgB,KACd,MAAMC,EAAO5B,EAAIuB,QACjB,GAAIK,EAAM,CACR,MAAMC,EAAqBD,EAAKE,MAAMC,WAChCC,EAAoBJ,EAAKE,MAAMG,UAErCL,EAAKE,MAAMC,WAAa,OACxBH,EAAKE,MAAMG,UAAY,OAGvB,MAAMC,EAAON,EAAKO,wBAClBd,EAAUE,QAAUW,EAAKZ,OACzBE,EAASD,QAAUW,EAAKT,MAGxBG,EAAKE,MAAMC,WAAaF,EACxBD,EAAKE,MAAMG,UAAYD,EACvBhB,EAAaL,MAQd,CAACR,EAAQ5B,KAAMoC,iBAGhBzB,EAAAC,cAACQ,EAAUC,IAAXC,EAAA,CACE,aAAYC,EAASK,EAAQ5B,MAC7B,gBAAe4B,EAAQzB,SAAW,QAAKqB,EACvCqC,GAAIjC,EAAQb,UACZ+C,QAASX,GACLjB,EALN,CAMET,IAAKmB,EACLW,MAAO,CACL,qCAA+CR,EAAU,GAAEA,WAAavB,EACxE,oCAA8C0B,EAAS,GAAEA,WAAY1B,KAClE3B,EAAM0D,SAGVJ,GAAUZ,MAOjB,SAAShB,EAASvB,GAChB,OAAOA,EAAO,OAAS,gBAGzB,MAAM+D,KAAOrE,mBACb,MAAMsE,QAAUtC,0BAChB,MAAMuC,QAAUjC","sources":["./packages/react/collapsible/src/Collapsible.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Presence } from '@radix-ui/react-presence';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Collapsible\n * -----------------------------------------------------------------------------------------------*/\n\nconst COLLAPSIBLE_NAME = 'Collapsible';\n\ntype ScopedProps<P> = P & { __scopeCollapsible?: Scope };\nconst [createCollapsibleContext, createCollapsibleScope] = createContextScope(COLLAPSIBLE_NAME);\n\ntype CollapsibleContextValue = {\n  contentId: string;\n  disabled?: boolean;\n  open: boolean;\n  onOpenToggle(): void;\n};\n\nconst [CollapsibleProvider, useCollapsibleContext] =\n  createCollapsibleContext<CollapsibleContextValue>(COLLAPSIBLE_NAME);\n\ntype CollapsibleElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface CollapsibleProps extends PrimitiveDivProps {\n  defaultOpen?: boolean;\n  open?: boolean;\n  disabled?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst Collapsible = React.forwardRef<CollapsibleElement, CollapsibleProps>(\n  (props: ScopedProps<CollapsibleProps>, forwardedRef) => {\n    const {\n      __scopeCollapsible,\n      open: openProp,\n      defaultOpen,\n      disabled,\n      onOpenChange,\n      ...collapsibleProps\n    } = props;\n\n    const [open = false, setOpen] = useControllableState({\n      prop: openProp,\n      defaultProp: defaultOpen,\n      onChange: onOpenChange,\n    });\n\n    return (\n      <CollapsibleProvider\n        scope={__scopeCollapsible}\n        disabled={disabled}\n        contentId={useId()}\n        open={open}\n        onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      >\n        <Primitive.div\n          data-state={getState(open)}\n          data-disabled={disabled ? '' : undefined}\n          {...collapsibleProps}\n          ref={forwardedRef}\n        />\n      </CollapsibleProvider>\n    );\n  }\n);\n\nCollapsible.displayName = COLLAPSIBLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'CollapsibleTrigger';\n\ntype CollapsibleTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CollapsibleTriggerProps extends PrimitiveButtonProps {}\n\nconst CollapsibleTrigger = React.forwardRef<CollapsibleTriggerElement, CollapsibleTriggerProps>(\n  (props: ScopedProps<CollapsibleTriggerProps>, forwardedRef) => {\n    const { __scopeCollapsible, ...triggerProps } = props;\n    const context = useCollapsibleContext(TRIGGER_NAME, __scopeCollapsible);\n    return (\n      <Primitive.button\n        aria-controls={context.contentId}\n        aria-expanded={context.open || false}\n        data-state={getState(context.open)}\n        data-disabled={context.disabled ? '' : undefined}\n        disabled={context.disabled}\n        {...triggerProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nCollapsibleTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'CollapsibleContent';\n\ntype CollapsibleContentElement = CollapsibleContentImplElement;\ninterface CollapsibleContentProps extends Omit<CollapsibleContentImplProps, 'present'> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CollapsibleContent = React.forwardRef<CollapsibleContentElement, CollapsibleContentProps>(\n  (props: ScopedProps<CollapsibleContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = useCollapsibleContext(CONTENT_NAME, props.__scopeCollapsible);\n    return (\n      <Presence present={forceMount || context.open}>\n        {({ present }) => (\n          <CollapsibleContentImpl {...contentProps} ref={forwardedRef} present={present} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nCollapsibleContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype CollapsibleContentImplElement = React.ElementRef<typeof Primitive.div>;\ninterface CollapsibleContentImplProps extends PrimitiveDivProps {\n  present: boolean;\n}\n\nconst CollapsibleContentImpl = React.forwardRef<\n  CollapsibleContentImplElement,\n  CollapsibleContentImplProps\n>((props: ScopedProps<CollapsibleContentImplProps>, forwardedRef) => {\n  const { __scopeCollapsible, present, children, ...contentProps } = props;\n  const context = useCollapsibleContext(CONTENT_NAME, __scopeCollapsible);\n  const [isPresent, setIsPresent] = React.useState(present);\n  const ref = React.useRef<CollapsibleContentImplElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const heightRef = React.useRef<number | undefined>(0);\n  const height = heightRef.current;\n  const widthRef = React.useRef<number | undefined>(0);\n  const width = widthRef.current;\n  // when opening we want it to immediately open to retrieve dimensions\n  // when closing we delay `present` to retrieve dimensions before closing\n  const isOpen = context.open || isPresent;\n\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node) {\n      const originalTransition = node.style.transition;\n      const originalAnimation = node.style.animation;\n      // block any animations/transitions so the element renders at its full dimensions\n      node.style.transition = 'none';\n      node.style.animation = 'none';\n\n      // get width and height from full dimensions\n      const rect = node.getBoundingClientRect();\n      heightRef.current = rect.height;\n      widthRef.current = rect.width;\n\n      // kick off any animations/transitions that were originally set up\n      node.style.transition = originalTransition;\n      node.style.animation = originalAnimation;\n      setIsPresent(present);\n    }\n    /**\n     * depends on `context.open` because it will change to `false`\n     * when a close is triggered but `present` will be `false` on\n     * animation end (so when close finishes). This allows us to\n     * retrieve the dimensions *before* closing.\n     */\n  }, [context.open, present]);\n\n  return (\n    <Primitive.div\n      data-state={getState(context.open)}\n      data-disabled={context.disabled ? '' : undefined}\n      id={context.contentId}\n      hidden={!isOpen}\n      {...contentProps}\n      ref={composedRefs}\n      style={{\n        [`--radix-collapsible-content-height` as any]: height ? `${height}px` : undefined,\n        [`--radix-collapsible-content-width` as any]: width ? `${width}px` : undefined,\n        ...props.style,\n      }}\n    >\n      {isOpen && children}\n    </Primitive.div>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Collapsible;\nconst Trigger = CollapsibleTrigger;\nconst Content = CollapsibleContent;\n\nexport {\n  createCollapsibleScope,\n  //\n  Collapsible,\n  CollapsibleTrigger,\n  CollapsibleContent,\n  //\n  Root,\n  Trigger,\n  Content,\n};\nexport type { CollapsibleProps, CollapsibleTriggerProps, CollapsibleContentProps };\n"],"names":["createCollapsibleContext","createCollapsibleScope","createContextScope","CollapsibleProvider","useCollapsibleContext","Collapsible","React","forwardRef","props","forwardedRef","__scopeCollapsible","open","openProp","defaultOpen","disabled","onOpenChange","collapsibleProps","setOpen","useControllableState","prop","defaultProp","onChange","_react","createElement","$a5c9ff236b90360c7963e374990ad39$var$CollapsibleProvider","scope","contentId","useId","onOpenToggle","useCallback","prevOpen","Primitive","div","_babelRuntimeHelpersEsmExtends","getState","undefined","ref","CollapsibleTrigger","triggerProps","context","button","onClick","composeEventHandlers","CollapsibleContent","forceMount","contentProps","Presence","present","$a5c9ff236b90360c7963e374990ad39$var$CollapsibleContentImpl","CollapsibleContentImpl","children","isPresent","setIsPresent","useState","useRef","composedRefs","useComposedRefs","heightRef","height","current","widthRef","width","isOpen","useLayoutEffect","node","originalTransition","style","transition","originalAnimation","animation","rect","getBoundingClientRect","id","hidden","Root","Trigger","Content"],"version":3,"file":"index.module.js.map"}