{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/accordion/src/Accordion.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\nimport { createCollapsibleScope } from '@radix-ui/react-collapsible';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACCORDION_NAME = 'Accordion';\nconst ACCORDION_KEYS = ['Home', 'End', 'ArrowDown', 'ArrowUp'];\n\ntype ScopedProps<P> = P & { __scopeAccordion?: Scope };\nconst [createAccordionContext, createAccordionScope] = createContextScope(ACCORDION_NAME, [\n  createCollapsibleScope,\n]);\nconst useCollapsibleScope = createCollapsibleScope();\n\ntype AccordionElement = AccordionImplMultipleElement | AccordionImplSingleElement;\ninterface AccordionSingleProps extends AccordionImplSingleProps {\n  type: 'single';\n}\ninterface AccordionMultipleProps extends AccordionImplMultipleProps {\n  type: 'multiple';\n}\n\nconst Accordion = React.forwardRef<AccordionElement, AccordionSingleProps | AccordionMultipleProps>(\n  (props, forwardedRef) => {\n    const { type, ...accordionProps } = props;\n\n    if (type === 'single') {\n      const singleProps = accordionProps as AccordionImplSingleProps;\n      return <AccordionImplSingle {...singleProps} ref={forwardedRef} />;\n    }\n\n    if (type === 'multiple') {\n      const multipleProps = accordionProps as AccordionImplMultipleProps;\n      return <AccordionImplMultiple {...multipleProps} ref={forwardedRef} />;\n    }\n\n    throw new Error(`Missing prop \\`type\\` expected on \\`${ACCORDION_NAME}\\``);\n  }\n);\n\nAccordion.displayName = ACCORDION_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionValueContextValue = {\n  value: string[];\n  onItemOpen(value: string): void;\n  onItemClose(value: string): void;\n};\n\nconst [AccordionValueProvider, useAccordionValueContext] =\n  createAccordionContext<AccordionValueContextValue>(ACCORDION_NAME);\n\nconst [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(\n  ACCORDION_NAME,\n  { collapsible: false }\n);\n\ntype AccordionImplSingleElement = AccordionImplElement;\ninterface AccordionImplSingleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion item whose content is expanded.\n   */\n  value?: string;\n  /**\n   * The value of the item whose content is expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string): void;\n  /**\n   * Whether an accordion item can be collapsed after it has been opened.\n   * @default false\n   */\n  collapsible?: boolean;\n}\n\nconst AccordionImplSingle = React.forwardRef<AccordionImplSingleElement, AccordionImplSingleProps>(\n  (props: ScopedProps<AccordionImplSingleProps>, forwardedRef) => {\n    const {\n      value: valueProp,\n      defaultValue,\n      onValueChange = () => {},\n      collapsible = false,\n      ...accordionSingleProps\n    } = props;\n\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    return (\n      <AccordionValueProvider\n        scope={props.__scopeAccordion}\n        value={value ? [value] : []}\n        onItemOpen={setValue}\n        onItemClose={React.useCallback(() => collapsible && setValue(''), [collapsible, setValue])}\n      >\n        <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={collapsible}>\n          <AccordionImpl {...accordionSingleProps} ref={forwardedRef} />\n        </AccordionCollapsibleProvider>\n      </AccordionValueProvider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplMultipleElement = AccordionImplElement;\ninterface AccordionImplMultipleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion items whose contents are expanded.\n   */\n  value?: string[];\n  /**\n   * The value of the items whose contents are expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst AccordionImplMultiple = React.forwardRef<\n  AccordionImplMultipleElement,\n  AccordionImplMultipleProps\n>((props: ScopedProps<AccordionImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...accordionMultipleProps\n  } = props;\n\n  const [value = [], setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  const handleItemOpen = React.useCallback(\n    (itemValue) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleItemClose = React.useCallback(\n    (itemValue) => setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <AccordionValueProvider\n      scope={props.__scopeAccordion}\n      value={value}\n      onItemOpen={handleItemOpen}\n      onItemClose={handleItemClose}\n    >\n      <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={true}>\n        <AccordionImpl {...accordionMultipleProps} ref={forwardedRef} />\n      </AccordionCollapsibleProvider>\n    </AccordionValueProvider>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplContextValue = {\n  triggerNodesRef: React.MutableRefObject<Set<HTMLElement | null>>;\n  disabled?: boolean;\n};\n\nconst [AccordionImplProvider, useAccordionContext] =\n  createAccordionContext<AccordionImplContextValue>(ACCORDION_NAME);\n\ntype AccordionImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface AccordionImplProps extends PrimitiveDivProps {\n  /**\n   * Whether or not an accordion is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n}\n\nconst AccordionImpl = React.forwardRef<AccordionImplElement, AccordionImplProps>(\n  (props: ScopedProps<AccordionImplProps>, forwardedRef) => {\n    const { __scopeAccordion, disabled, ...accordionProps } = props;\n    const triggerNodesRef = React.useRef<Set<AccordionTriggerElement>>(new Set());\n    const accordionRef = React.useRef<AccordionImplElement>(null);\n    const composedRefs = useComposedRefs(accordionRef, forwardedRef);\n\n    const handleKeyDown = composeEventHandlers(props.onKeyDown, (event) => {\n      const target = event.target as HTMLElement;\n      const isAccordionKey = ACCORDION_KEYS.includes(event.key);\n\n      if (!isAccordionKey || !isButton(target)) {\n        return;\n      }\n\n      const triggerNodes = [...triggerNodesRef.current].filter((node) => !node?.disabled);\n      const triggerCount = triggerNodes.length;\n      const triggerIndex = triggerNodes.indexOf(target);\n\n      if (triggerIndex === -1) return;\n\n      // Prevents page scroll while user is navigating\n      event.preventDefault();\n\n      let nextIndex = triggerIndex;\n      switch (event.key) {\n        case 'Home':\n          nextIndex = 0;\n          break;\n        case 'End':\n          nextIndex = triggerCount - 1;\n          break;\n        case 'ArrowDown':\n          nextIndex = triggerIndex + 1;\n          break;\n        case 'ArrowUp':\n          nextIndex = triggerIndex - 1;\n          if (nextIndex < 0) {\n            nextIndex = triggerCount - 1;\n          }\n          break;\n      }\n\n      const clampedIndex = nextIndex % triggerCount;\n      triggerNodes[clampedIndex]?.focus();\n    });\n\n    return (\n      <AccordionImplProvider\n        scope={__scopeAccordion}\n        triggerNodesRef={triggerNodesRef}\n        disabled={disabled}\n      >\n        <Primitive.div\n          {...accordionProps}\n          ref={composedRefs}\n          onKeyDown={disabled ? undefined : handleKeyDown}\n        />\n      </AccordionImplProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'AccordionItem';\n\ntype AccordionItemContextValue = { open?: boolean; disabled?: boolean; triggerId: string };\nconst [AccordionItemProvider, useAccordionItemContext] =\n  createAccordionContext<AccordionItemContextValue>(ITEM_NAME);\n\ntype AccordionItemElement = React.ElementRef<typeof CollapsiblePrimitive.Root>;\ntype CollapsibleProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Root>;\ninterface AccordionItemProps\n  extends Omit<CollapsibleProps, 'open' | 'defaultOpen' | 'onOpenChange'> {\n  /**\n   * Whether or not an accordion item is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * A string value for the accordion item. All items within an accordion should use a unique value.\n   */\n  value: string;\n}\n\n/**\n * `AccordionItem` contains all of the parts of a collapsible section inside of an `Accordion`.\n */\nconst AccordionItem = React.forwardRef<AccordionItemElement, AccordionItemProps>(\n  (props: ScopedProps<AccordionItemProps>, forwardedRef) => {\n    const { __scopeAccordion, value, ...accordionItemProps } = props;\n    const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);\n    const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    const triggerId = useId();\n    const open = (value && valueContext.value.includes(value)) || false;\n    const disabled = accordionContext.disabled || props.disabled;\n\n    return (\n      <AccordionItemProvider\n        scope={__scopeAccordion}\n        open={open}\n        disabled={disabled}\n        triggerId={triggerId}\n      >\n        <CollapsiblePrimitive.Root\n          data-state={open ? 'open' : 'closed'}\n          {...collapsibleScope}\n          {...accordionItemProps}\n          ref={forwardedRef}\n          disabled={disabled}\n          open={open}\n          onOpenChange={(open) => {\n            if (open) {\n              valueContext.onItemOpen(value);\n            } else {\n              valueContext.onItemClose(value);\n            }\n          }}\n        />\n      </AccordionItemProvider>\n    );\n  }\n);\n\nAccordionItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst HEADER_NAME = 'AccordionHeader';\n\ntype AccordionHeaderElement = React.ElementRef<typeof Primitive.h3>;\ntype PrimitiveHeading3Props = Radix.ComponentPropsWithoutRef<typeof Primitive.h3>;\ninterface AccordionHeaderProps extends PrimitiveHeading3Props {}\n\n/**\n * `AccordionHeader` contains the content for the parts of an `AccordionItem` that will be visible\n * whether or not its content is collapsed.\n */\nconst AccordionHeader = React.forwardRef<AccordionHeaderElement, AccordionHeaderProps>(\n  (props: ScopedProps<AccordionHeaderProps>, forwardedRef) => {\n    const { __scopeAccordion, ...headerProps } = props;\n    const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);\n    return (\n      <Primitive.h3\n        data-state={getState(itemContext.open)}\n        data-disabled={itemContext.disabled ? '' : undefined}\n        {...headerProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nAccordionHeader.displayName = HEADER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'AccordionTrigger';\n\ntype AccordionTriggerElement = React.ElementRef<typeof CollapsiblePrimitive.Trigger>;\ntype CollapsibleTriggerProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Trigger>;\ninterface AccordionTriggerProps extends CollapsibleTriggerProps {}\n\n/**\n * `AccordionTrigger` is the trigger that toggles the collapsed state of an `AccordionItem`. It\n * should always be nested inside of an `AccordionHeader`.\n */\nconst AccordionTrigger = React.forwardRef<AccordionTriggerElement, AccordionTriggerProps>(\n  (props: ScopedProps<AccordionTriggerProps>, forwardedRef) => {\n    const { __scopeAccordion, ...triggerProps } = props;\n    const { triggerNodesRef } = useAccordionContext(TRIGGER_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    const ref = React.useRef<AccordionTriggerElement>(null);\n    const composedRefs = useComposedRefs(ref, forwardedRef);\n\n    React.useEffect(() => {\n      const triggerNodes = triggerNodesRef.current;\n      const triggerNode = ref.current;\n\n      if (triggerNode) {\n        triggerNodes.add(triggerNode);\n        return () => {\n          triggerNodes.delete(triggerNode);\n        };\n      }\n      return;\n    }, [triggerNodesRef]);\n\n    return (\n      <CollapsiblePrimitive.Trigger\n        aria-disabled={(itemContext.open && !collapsibleContext.collapsible) || undefined}\n        id={itemContext.triggerId}\n        {...collapsibleScope}\n        {...triggerProps}\n        ref={composedRefs}\n      />\n    );\n  }\n);\n\nAccordionTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AccordionContent';\n\ntype AccordionContentElement = React.ElementRef<typeof CollapsiblePrimitive.Content>;\ntype CollapsibleContentProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Content>;\ninterface AccordionContentProps extends CollapsibleContentProps {}\n\n/**\n * `AccordionContent` contains the collapsible content for an `AccordionItem`.\n */\nconst AccordionContent = React.forwardRef<AccordionContentElement, AccordionContentProps>(\n  (props: ScopedProps<AccordionContentProps>, forwardedRef) => {\n    const { __scopeAccordion, ...contentProps } = props;\n    const itemContext = useAccordionItemContext(CONTENT_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <CollapsiblePrimitive.Content\n        role=\"region\"\n        aria-labelledby={itemContext.triggerId}\n        {...collapsibleScope}\n        {...contentProps}\n        ref={forwardedRef}\n        style={{\n          ['--radix-accordion-content-height' as any]: 'var(--radix-collapsible-content-height)',\n          ['--radix-accordion-content-width' as any]: 'var(--radix-collapsible-content-width)',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nAccordionContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nfunction isButton(element: HTMLElement): element is HTMLButtonElement {\n  return element instanceof HTMLButtonElement;\n}\n\nconst Root = Accordion;\nconst Item = AccordionItem;\nconst Header = AccordionHeader;\nconst Trigger = AccordionTrigger;\nconst Content = AccordionContent;\n\nexport {\n  createAccordionScope,\n  //\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  //\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n};\nexport type {\n  AccordionSingleProps,\n  AccordionMultipleProps,\n  AccordionItemProps,\n  AccordionHeaderProps,\n  AccordionTriggerProps,\n  AccordionContentProps,\n};\n"],"names":["dest","source","Object","keys","forEach","key","defineProperty","enumerable","get","$parcel$interopDefault","a","__esModule","default","ACCORDION_KEYS","createAccordionContext","createAccordionScope","createContextScope","createCollapsibleScope","useCollapsibleScope","Accordion","React","forwardRef","props","forwardedRef","type","accordionProps","singleProps","_react","createElement","$cb9b5aef7d7fb550d41028d1634396$var$AccordionImplSingle","_babelRuntimeHelpersExtends","ref","multipleProps","$cb9b5aef7d7fb550d41028d1634396$var$AccordionImplMultiple","Error","AccordionValueProvider","useAccordionValueContext","AccordionCollapsibleProvider","useAccordionCollapsibleContext","collapsible","AccordionImplSingle","value","valueProp","defaultValue","onValueChange","accordionSingleProps","setValue","useControllableState","prop","defaultProp","onChange","$cb9b5aef7d7fb550d41028d1634396$var$AccordionValueProvider","scope","__scopeAccordion","onItemOpen","onItemClose","useCallback","$cb9b5aef7d7fb550d41028d1634396$var$AccordionCollapsibleProvider","$cb9b5aef7d7fb550d41028d1634396$var$AccordionImpl","AccordionImplMultiple","accordionMultipleProps","handleItemOpen","itemValue","prevValue","handleItemClose","filter","AccordionImplProvider","useAccordionContext","AccordionImpl","disabled","triggerNodesRef","useRef","Set","accordionRef","composedRefs","useComposedRefs","handleKeyDown","composeEventHandlers","onKeyDown","event","_triggerNodes$clamped","target","includes","element","HTMLButtonElement","triggerNodes","current","node","triggerCount","length","triggerIndex","indexOf","preventDefault","nextIndex","focus","$cb9b5aef7d7fb550d41028d1634396$var$AccordionImplProvider","Primitive","div","undefined","AccordionItemProvider","useAccordionItemContext","AccordionItem","accordionItemProps","accordionContext","valueContext","collapsibleScope","triggerId","useId","open","$cb9b5aef7d7fb550d41028d1634396$var$AccordionItemProvider","_radixUiReactCollapsible","Root","onOpenChange","AccordionHeader","headerProps","itemContext","h3","AccordionTrigger","triggerProps","collapsibleContext","useEffect","triggerNode","add","delete","Trigger","id","AccordionContent","contentProps","Content","role","style","Item","Header"],"version":3,"file":"index.js.map"}